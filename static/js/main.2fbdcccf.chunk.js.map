{"version":3,"sources":["App.js","utils/rgbaConverter.js","utils/transparencyConverter.js","index.js"],"names":["App","useState","hexValue","setHexValue","useForm","mode","register","handleSubmit","className","onSubmit","data","transparency","indexOf","opacity","rgb","replace","match","alpha","trim","toString","slice","toUpperCase","rgbaConverter","percent","Math","round","padStart","error","console","placeholder","name","type","ref","required","length","ReactDOM","render","document","getElementById"],"mappings":"4NA0DeA,G,MApDH,WAAO,IAAD,EACgBC,mBAAS,MADzB,mBACTC,EADS,KACCC,EADD,OAEmBC,YAAQ,CACzCC,KAAM,aADAC,EAFQ,EAERA,SAAUC,EAFF,EAEEA,aAiBlB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aAAf,sCACA,0BAAMC,SAAUF,GAjBL,SAAAG,GACf,IAAK,IACKC,EAAiBD,EAAjBC,cAC8B,IAAlCA,EAAaC,QAAQ,QACvBT,EChBqB,SAAAQ,GAC3B,IAAIE,EAAU,IACRC,EAAMH,EAAaI,QAAQ,MAAO,IAAIC,MAAM,2CAC5CC,GAAUH,GAAOA,EAAI,IAAO,IAAII,OAgBtC,MATc,KAAVD,IACFJ,EAAUI,IAPFH,GACK,IAAVA,EAAI,IAAeK,SAAS,IAAIC,MAAM,IAC5B,IAAVN,EAAI,IAAeK,SAAS,IAAIC,MAAM,IAC5B,IAAVN,EAAI,IAAeK,SAAS,IAAIC,MAAM,GACvCT,IAMJE,GAAsB,IAAVA,EAAkB,KAC3BM,SAAS,IACTC,MAAM,GACNC,eDDeC,CAAcX,IAE1BR,GElB6BoB,EFkBKZ,EEjBvBa,KAAKC,MAAOF,EAAU,IAAO,KACpBJ,SAAS,IAEnBO,SAAS,EAAG,KAAKL,gBFgB7B,MAAOM,GACPC,QAAQD,MAAM,UAAWA,GErBM,IAAAJ,MF8B3B,2BACEf,UAAU,YACVqB,YAAY,+DACZC,KAAK,eACLC,KAAK,OACLC,IAAK1B,EAAS,CAAE2B,UAAU,MAE5B,4BAAQzB,UAAU,aAAauB,KAAK,UAClC,6CAGH7B,GACC,yBAAKM,UAAU,aACb,yBAAKA,UAAU,YAAYN,GAC3B,yBAAKM,UAAU,YACQ,IAApBN,EAASgC,QACR,kDACmBhC,EADnB,cACwCA,EADxC,cAC6DA,SG1C7EiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2fbdcccf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { transparencyConverter, rgbaConverter } from 'utils';\nimport './App.css';\n\nconst App = () => {\n  const [hexValue, setHexValue] = useState(null);\n  const { register, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const onSubmit = data => {\n    try {\n      const { transparency } = data;\n      if (transparency.indexOf('rgba') !== -1) {\n        setHexValue(rgbaConverter(transparency));\n      } else {\n        setHexValue(transparencyConverter(transparency));\n      }\n    } catch (error) {\n      console.error('error=>', error);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <div className='App-title'>Hexadecimal color code for opacity</div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            className='App-input'\n            placeholder='Between 0 - 100 or rgba(0, 0, 0, 0.80) or rgba(0, 0, 0, .80)'\n            name='transparency'\n            type='text'\n            ref={register({ required: true })}\n          />\n          <button className='App-button' type='submit'>\n            <strong>Convert</strong>\n          </button>\n        </form>\n        {hexValue && (\n          <div className='App-value'>\n            <div className='App-text'>{hexValue}</div>\n            <div className='App-text'>\n              {hexValue.length === 2 && (\n                <small>\n                  Example: #000000{hexValue} || #ffffff{hexValue} || #ff0050{hexValue}\n                </small>\n              )}\n            </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","export const rgbaConverter = transparency => {\n  let opacity = 100;\n  const rgb = transparency.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i);\n  const alpha = ((rgb && rgb[4]) || '').trim();\n  let hex = rgb\n    ? (rgb[1] | (1 << 8)).toString(16).slice(1) +\n      (rgb[2] | (1 << 8)).toString(16).slice(1) +\n      (rgb[3] | (1 << 8)).toString(16).slice(1)\n    : transparency;\n\n  if (alpha !== '') {\n    opacity = alpha;\n  }\n\n  opacity = ((opacity * 255) | (1 << 8))\n    .toString(16)\n    .slice(1)\n    .toUpperCase();\n\n  return (hex += opacity);\n};\n","export const transparencyConverter = percent => {\n  const intValue = Math.round((percent / 100) * 255);\n  const hexValue = intValue.toString(16);\n\n  return hexValue.padStart(2, '0').toUpperCase();\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}